// Logic from https://github.com/SebLague/Marching-Cubes/blob/master/Assets/Scripts/Compute/MarchingCubes.compute

#pragma kernel March

#include "Common.hlsl"

static const int blockSize = 8;

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

RWStructuredBuffer<int> triangulationTable;    // length = 256 * 16

float3 voxelsPerAxis;
float isoLevel;

[numthreads(blockSize, blockSize, blockSize)]
void March (int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= voxelsPerAxis.x - 1 || id.y >= voxelsPerAxis.y - 1 || id.z >= voxelsPerAxis.z - 1) {
        return;
    }

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z, voxelsPerAxis)],
        points[indexFromCoord(id.x + 1, id.y, id.z, voxelsPerAxis)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1, voxelsPerAxis)],
        points[indexFromCoord(id.x, id.y, id.z + 1, voxelsPerAxis)],
        points[indexFromCoord(id.x, id.y + 1, id.z, voxelsPerAxis)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z, voxelsPerAxis)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1, voxelsPerAxis)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1, voxelsPerAxis)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    int offset = cubeIndex * 16;

    for (int i = 0; ; i += 3) {
        int edgeIndex = triangulationTable[offset + i];
        if (edgeIndex == - 1) break;

        int a0 = cornerIndexAFromEdge[edgeIndex];
        int b0 = cornerIndexBFromEdge[edgeIndex];
        int a1 = cornerIndexAFromEdge[triangulationTable[offset + i + 1]];
        int b1 = cornerIndexBFromEdge[triangulationTable[offset + i + 1]];
        int a2 = cornerIndexAFromEdge[triangulationTable[offset + i + 2]];
        int b2 = cornerIndexBFromEdge[triangulationTable[offset + i + 2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0], isoLevel);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1], isoLevel);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2], isoLevel);
        triangles.Append(tri);
    }


}
